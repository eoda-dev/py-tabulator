{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Tabulator for Python","text":"<p>Tabulator for Python provides Shiny for Python bindings for Tabulator JS.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code># Stable\npip install pytabulator\n\n# Dev\npip install git+https://github.com/eodaGmbH/py-tabulator\n</code></pre>"},{"location":"#basic-usage","title":"Basic usage","text":"<p>Shiny Express:</p> <pre><code>import pandas as pd\nfrom pytabulator import TableOptions, render_data_frame\nfrom shiny import render\nfrom shiny.express import input, ui\n\nui.div(\"Click on row to print name\", style=\"padding: 10px;\")\n\n\n@render.code\nasync def txt():\n    print(input.tabulator_row_clicked())\n    return input.tabulator_row_clicked()[\"Name\"]\n\n\n@render_data_frame(table_options=TableOptions(height=500))\ndef tabulator():\n    return pd.read_csv(\n        \"https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv\"\n    )\n</code></pre> <p>Shiny core:</p> <pre><code>import pandas as pd\nfrom pytabulator import TableOptions, Tabulator, output_tabulator, render_tabulator\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.output_text_verbatim(\"txt\", placeholder=True),\n    output_tabulator(\"tabulator\"),\n)\n\n\ndef server(input, output, session):\n    @render_tabulator\n    def tabulator():\n        df = pd.read_csv(\n            \"https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv\"\n        )\n        return Tabulator(df, table_options=TableOptions(height=311))\n\n    @render.code\n    async def txt():\n        print(input.tabulator_row_clicked())\n        return str(input.tabulator_row_clicked())\n\n\napp = App(app_ui, server)\n</code></pre>"},{"location":"api/","title":"API Documentation","text":""},{"location":"api/#basic-usage","title":"Basic usage","text":"<pre><code>import pandas as pd\nfrom pytabulator import TableOptions, render_data_frame\nfrom shiny import render\nfrom shiny.express import input, ui\n\nui.div(\"Click on row to print name\", style=\"padding: 10px;\")\n\n\n@render.code\nasync def txt():\n    print(input.tabulator_row_clicked())\n    return input.tabulator_row_clicked()[\"Name\"]\n\n\n@render_data_frame(table_options=TableOptions(height=500))\ndef tabulator():\n    return pd.read_csv(\n        \"https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv\"\n    )\n</code></pre> <p>See also detailed example.</p>"},{"location":"api/#pytabulator.shiny_bindings","title":"<code>pytabulator.shiny_bindings</code>","text":""},{"location":"api/#pytabulator.shiny_bindings.render_data_frame","title":"<code>render_data_frame</code>","text":"<p>             Bases: <code>Renderer[DataFrame]</code></p> <p>A decorator for a function that returns a <code>DataFrame</code></p> <p>Parameters:</p> Name Type Description Default <code>table_options</code> <code>TableOptions</code> <p>Table options.</p> <code>{}</code> Source code in <code>pytabulator/shiny_bindings.py</code> <pre><code>class render_data_frame(Renderer[DataFrame]):\n    \"\"\"A decorator for a function that returns a `DataFrame`\n\n    Args:\n        table_options (TableOptions): Table options.\n    \"\"\"\n\n    def auto_output_ui(self) -&gt; Tag:\n        return output_tabulator(self.output_id)\n\n    def __init__(\n        self,\n        _fn: ValueFn[DataFrame] = None,\n        *,\n        table_options: TableOptions | dict = {},\n    ) -&gt; None:\n        super().__init__(_fn)\n        self.table_options = table_options\n\n    async def render(self) -&gt; Jsonifiable:\n        df = await self.fn()\n        # return {\"values\": value.values.tolist(), \"columns\": value.columns.tolist()}\n        # TODO: convert with js\n        data = df_to_dict(df)\n        data[\"options\"] = jsonifiable_table_options(self.table_options)\n        return data\n</code></pre>"},{"location":"api/#pytabulator.shiny_bindings.render_tabulator","title":"<code>render_tabulator</code>","text":"<p>             Bases: <code>Renderer[Tabulator]</code></p> <p>A decorator for a function that returns a <code>Tabulator</code> table</p> Source code in <code>pytabulator/shiny_bindings.py</code> <pre><code>class render_tabulator(Renderer[Tabulator]):\n    \"\"\"A decorator for a function that returns a `Tabulator` table\"\"\"\n\n    def auto_output_ui(self) -&gt; Tag:\n        return output_tabulator(self.output_id)\n\n    async def transform(self, value: Tabulator) -&gt; Jsonifiable:\n        # return {\"values\": value.values.tolist(), \"columns\": value.columns.tolist()}\n        # TODO: convert with js\n        return value.to_dict()\n</code></pre>"},{"location":"api/#pytabulator.shiny_bindings.output_tabulator","title":"<code>output_tabulator(id)</code>","text":"<p>Create an output container for a <code>Tabulator</code> table</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>An output id of a <code>Tabulator</code> table.</p> required Source code in <code>pytabulator/shiny_bindings.py</code> <pre><code>def output_tabulator(id: str):\n    \"\"\"Create an output container for a `Tabulator` table\n\n    Args:\n        id (str): An output id of a `Tabulator` table.\n    \"\"\"\n    return ui.div(\n        tabulator_dep(),\n        tabulator_bindings_dep,\n        id=resolve_id(id),\n        class_=\"shiny-tabulator-output\",\n    )\n</code></pre>"},{"location":"api/#pytabulator.utils","title":"<code>pytabulator.utils</code>","text":""},{"location":"api/#pytabulator.utils.create_columns","title":"<code>create_columns(df, default_filter=False, default_editor=False, updates={})</code>","text":"<p>Create columns configuration from a data frame</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>The data frame to create columns from.</p> required <code>default_filter</code> <code>bool</code> <p>Whether to add a default header filter to each column.</p> <code>False</code> <code>default_editor</code> <code>bool</code> <p>Whether to add a default editor to each column.</p> <code>False</code> <code>updates</code> <code>dict</code> <p>Dictionary of updates that overwrite the default settings or add additional settings the columns.</p> <code>{}</code> Source code in <code>pytabulator/utils.py</code> <pre><code>def create_columns(\n    df: DataFrame,\n    default_filter: bool = False,\n    default_editor: bool = False,\n    updates: dict = {},\n) -&gt; list:\n    \"\"\"Create columns configuration from a data frame\n\n    Args:\n        df (DataFrame): The data frame to create columns from.\n        default_filter (bool): Whether to add a default header filter to each column.\n        default_editor (bool): Whether to add a default editor to each column.\n        updates (dict): Dictionary of updates that overwrite the default settings or add additional settings the columns.\n    \"\"\"\n    # (hozAlign, headerFilter, editor)\n    setup = [\n        (\n            (\"right\", \"number\", \"number\")\n            if dtype in [int, float]\n            else (\"left\", \"input\", \"input\")\n        )\n        for dtype in df.dtypes.tolist()\n    ]\n    columns = [\n        {\"title\": column, \"field\": column, \"hozAlign\": setup[i][0]}\n        for i, column in enumerate(df.columns)\n    ]\n\n    if default_filter:\n        for i, column in enumerate(columns):\n            column[\"headerFilter\"] = setup[i][1]\n\n    if default_editor:\n        for i, column in enumerate(columns):\n            column[\"editor\"] = setup[i][2]\n\n    for key in updates:\n        for column in columns:\n            if column[\"field\"] == key:\n                column.update(updates[key])\n\n    return columns\n</code></pre>"},{"location":"api/#pytabulator.tabulator","title":"<code>pytabulator.tabulator</code>","text":""},{"location":"api/#pytabulator.tabulator.Tabulator","title":"<code>Tabulator</code>","text":"<p>             Bases: <code>object</code></p> <p>Tabulator</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>A data frame.</p> required <code>table_options</code> <code>TableOptions</code> <p>Table options.</p> <code>{}</code> Source code in <code>pytabulator/tabulator.py</code> <pre><code>class Tabulator(object):\n    \"\"\"Tabulator\n\n    Args:\n        df (DataFrame): A data frame.\n        table_options (TableOptions): Table options.\n    \"\"\"\n\n    def __init__(\n        self,\n        df: DataFrame,\n        table_options: TableOptions | dict = {},\n    ) -&gt; None:\n        self.df = df\n        # self.table_options = table_options\n        self._table_options = jsonifiable_table_options(table_options)\n\n    def options(self, **kwargs) -&gt; Tabulator:\n        self._table_options.update(kwargs)\n        return self\n\n    def to_dict(self) -&gt; dict:\n        data = df_to_dict(self.df)\n        # data[\"options\"] = jsonifiable_table_options(self.table_options)\n        data[\"options\"] = self._table_options\n        return data\n</code></pre>"},{"location":"api/#pytabulator.tabulator_context","title":"<code>pytabulator.tabulator_context</code>","text":""},{"location":"api/#pytabulator.tabulator_context.TabulatorContext","title":"<code>TabulatorContext</code>","text":"<p>             Bases: <code>object</code></p> <p>Table context</p> Source code in <code>pytabulator/tabulator_context.py</code> <pre><code>class TabulatorContext(object):\n    \"\"\"Table context\"\"\"\n\n    def __init__(self, id: str, session: Session = None) -&gt; None:\n        self.id = id\n        self._session = require_active_session(session)\n        self._message_queue = []\n\n    async def __aenter__(self):\n        return self\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        await self.render()\n\n    async def render(self):\n        await self._session.send_custom_message(\n            f\"tabulator-{self.id}\", {\"id\": self.id, \"calls\": self._message_queue}\n        )\n\n    def add_call(self, method_name: str, *args) -&gt; None:\n        \"\"\"Add a method call that is executed on the table instance\n\n        Args:\n            method_name (str): The name of the method to be executed.\n            *args (any): The arguments to be passed to the table method.\n        \"\"\"\n        call = [method_name, args]\n        self._message_queue.append(call)\n\n    def trigger_download(\n        self, type: Literal[\"csv\", \"json\", \"xlsx\"] = \"csv\", file_name: str = None, *args\n    ) -&gt; None:\n        \"\"\"Trigger download\n\n        Args:\n            type (str): The data type of the file to be downloaded.\n            file_name (str): The file name.\n            *args (any): The arguments to be passed to the `table.download` method.\n        \"\"\"\n        if not file_name:\n            file_name = f\"tabulator-data.{type}\"\n\n        self.add_call(\"download\", type, file_name, *args)\n\n    def add_row(self, row: dict = {}) -&gt; None:\n        \"\"\"Add a row to the table\n\n        Args:\n            row (dict): Row data to add.\n        \"\"\"\n        self.add_call(\"addRow\", row)\n\n    def delete_row(self, index: int | str) -&gt; None:\n        \"\"\"Delete a row from the table\n\n        Args:\n            index: The index of the row to delete.\n        \"\"\"\n        self.add_call(\"deleteRow\", index)\n\n    def delete_selected_rows(self) -&gt; None:\n        \"\"\"Delete selected rows from table\"\"\"\n        self.add_call(\"deleteSelectedRows\")\n\n    def undo(self) -&gt; None:\n        \"\"\"Trigger undo\"\"\"\n        self.add_call(\"undo\")\n\n    def redo(self) -&gt; None:\n        \"\"\"Trigger redo\"\"\"\n        self.add_call(\"redo\")\n\n    def trigger_get_data(self) -&gt; None:\n        \"\"\"Trigger sending data\"\"\"\n        self.add_call(\"getData\")\n</code></pre>"},{"location":"api/#pytabulator.tabulator_context.TabulatorContext.add_call","title":"<code>add_call(method_name, *args)</code>","text":"<p>Add a method call that is executed on the table instance</p> <p>Parameters:</p> Name Type Description Default <code>method_name</code> <code>str</code> <p>The name of the method to be executed.</p> required <code>*args</code> <code>any</code> <p>The arguments to be passed to the table method.</p> <code>()</code> Source code in <code>pytabulator/tabulator_context.py</code> <pre><code>def add_call(self, method_name: str, *args) -&gt; None:\n    \"\"\"Add a method call that is executed on the table instance\n\n    Args:\n        method_name (str): The name of the method to be executed.\n        *args (any): The arguments to be passed to the table method.\n    \"\"\"\n    call = [method_name, args]\n    self._message_queue.append(call)\n</code></pre>"},{"location":"api/#pytabulator.tabulator_context.TabulatorContext.add_row","title":"<code>add_row(row={})</code>","text":"<p>Add a row to the table</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>dict</code> <p>Row data to add.</p> <code>{}</code> Source code in <code>pytabulator/tabulator_context.py</code> <pre><code>def add_row(self, row: dict = {}) -&gt; None:\n    \"\"\"Add a row to the table\n\n    Args:\n        row (dict): Row data to add.\n    \"\"\"\n    self.add_call(\"addRow\", row)\n</code></pre>"},{"location":"api/#pytabulator.tabulator_context.TabulatorContext.delete_row","title":"<code>delete_row(index)</code>","text":"<p>Delete a row from the table</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int | str</code> <p>The index of the row to delete.</p> required Source code in <code>pytabulator/tabulator_context.py</code> <pre><code>def delete_row(self, index: int | str) -&gt; None:\n    \"\"\"Delete a row from the table\n\n    Args:\n        index: The index of the row to delete.\n    \"\"\"\n    self.add_call(\"deleteRow\", index)\n</code></pre>"},{"location":"api/#pytabulator.tabulator_context.TabulatorContext.delete_selected_rows","title":"<code>delete_selected_rows()</code>","text":"<p>Delete selected rows from table</p> Source code in <code>pytabulator/tabulator_context.py</code> <pre><code>def delete_selected_rows(self) -&gt; None:\n    \"\"\"Delete selected rows from table\"\"\"\n    self.add_call(\"deleteSelectedRows\")\n</code></pre>"},{"location":"api/#pytabulator.tabulator_context.TabulatorContext.redo","title":"<code>redo()</code>","text":"<p>Trigger redo</p> Source code in <code>pytabulator/tabulator_context.py</code> <pre><code>def redo(self) -&gt; None:\n    \"\"\"Trigger redo\"\"\"\n    self.add_call(\"redo\")\n</code></pre>"},{"location":"api/#pytabulator.tabulator_context.TabulatorContext.trigger_download","title":"<code>trigger_download(type='csv', file_name=None, *args)</code>","text":"<p>Trigger download</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>str</code> <p>The data type of the file to be downloaded.</p> <code>'csv'</code> <code>file_name</code> <code>str</code> <p>The file name.</p> <code>None</code> <code>*args</code> <code>any</code> <p>The arguments to be passed to the <code>table.download</code> method.</p> <code>()</code> Source code in <code>pytabulator/tabulator_context.py</code> <pre><code>def trigger_download(\n    self, type: Literal[\"csv\", \"json\", \"xlsx\"] = \"csv\", file_name: str = None, *args\n) -&gt; None:\n    \"\"\"Trigger download\n\n    Args:\n        type (str): The data type of the file to be downloaded.\n        file_name (str): The file name.\n        *args (any): The arguments to be passed to the `table.download` method.\n    \"\"\"\n    if not file_name:\n        file_name = f\"tabulator-data.{type}\"\n\n    self.add_call(\"download\", type, file_name, *args)\n</code></pre>"},{"location":"api/#pytabulator.tabulator_context.TabulatorContext.trigger_get_data","title":"<code>trigger_get_data()</code>","text":"<p>Trigger sending data</p> Source code in <code>pytabulator/tabulator_context.py</code> <pre><code>def trigger_get_data(self) -&gt; None:\n    \"\"\"Trigger sending data\"\"\"\n    self.add_call(\"getData\")\n</code></pre>"},{"location":"api/#pytabulator.tabulator_context.TabulatorContext.undo","title":"<code>undo()</code>","text":"<p>Trigger undo</p> Source code in <code>pytabulator/tabulator_context.py</code> <pre><code>def undo(self) -&gt; None:\n    \"\"\"Trigger undo\"\"\"\n    self.add_call(\"undo\")\n</code></pre>"},{"location":"api/#pytabulator.TableOptions","title":"<code>pytabulator.TableOptions</code>  <code>dataclass</code>","text":"<p>             Bases: <code>TableOptions</code></p> <p>Table options</p> <p>Attributes:</p> Name Type Description <code>add_row_pos</code> <code>Literal['bottom', 'top']</code> <p>Where to add rows. Defaults to <code>\"bottom\"</code>.</p> <code>columns</code> <code>list</code> <p>Column definitions.</p> <code>frozen_rows</code> <code>int</code> <p>Number of frozen rows. Defaults to <code>\u01f8one</code>.</p> <code>group_by</code> <code>Union[str, list]</code> <p>Columns to group by. Defaults to <code>None</code>.</p> <code>header_visible</code> <code>bool</code> <p>Whether to display the header of the table. Defaults to <code>True</code>.</p> <code>height</code> <code>Union[int, None]</code> <p>The height of the table in pixels. Defaults to <code>311</code>.</p> <code>history</code> <code>bool</code> <p>Whether to enable history. Must be set if <code>undo</code> and <code>redo</code> is used. Defaults to <code>False</code>.</p> <code>index</code> <code>str</code> <p>The field to be used as a unique index for each row. Defaults to <code>\"id\"</code>.</p> <code>layout</code> <code>Literal['fitData', 'fitDataFill', 'fitDataStretch', 'fitDataTable', 'fitColumns']</code> <p>The layout of the table. Defaults to <code>\"fitColumns\"</code>.</p> <code>movable_rows</code> <code>bool</code> <p>Whether rows are movable. Defaults to <code>False</code>.</p> <code>pagination_add_row</code> <code>Literal['page', 'table']</code> <p>Where to add rows when pagination is enabled. Defaults to <code>\"page\"</code>.</p> <code>pagination</code> <code>bool</code> <p>Whether to enable pagination. Defaults to <code>False</code>.</p> <code>pagination_counter</code> <code>str</code> <p>Whether to display counted rows in footer. Defaults to <code>\"rows\"</code>.</p> <code>resizable_column_fit</code> <code>bool</code> <p>Maintain total column width when resizing a column. Defaults to <code>False</code>.</p> <code>row_height</code> <code>int</code> <p>Fixed height for rows. Defaults to <code>None</code>.</p> <code>selectable_rows</code> <code>Union[str, bool, int]</code> <p>Whether a row is selectable. An integer value sets the maximum number of rows, that can be selected. If set to <code>\"highlight\"</code>, rows do not change their state when they are clicked. Defaults to <code>\"highlight\"</code>.</p> Source code in <code>pytabulator/_table_options_dc.py</code> <pre><code>@dataclass\nclass TableOptionsDC(TableOptions):\n    \"\"\"Table options\n\n    Attributes:\n        add_row_pos: Where to add rows. Defaults to `\"bottom\"`.\n        columns: Column definitions.\n        frozen_rows: Number of frozen rows. Defaults to `\u01f8one`.\n        group_by: Columns to group by. Defaults to `None`.\n        header_visible: Whether to display the header of the table. Defaults to `True`.\n        height: The height of the table in pixels. Defaults to `311`.\n        history: Whether to enable history. Must be set if `undo` and `redo` is used. Defaults to `False`.\n        index: The field to be used as a unique index for each row. Defaults to `\"id\"`.\n        layout: The layout of the table. Defaults to `\"fitColumns\"`.\n        movable_rows: Whether rows are movable. Defaults to `False`.\n        pagination_add_row: Where to add rows when pagination is enabled. Defaults to `\"page\"`.\n        pagination: Whether to enable pagination. Defaults to `False`.\n        pagination_counter: Whether to display counted rows in footer. Defaults to `\"rows\"`.\n        resizable_column_fit: Maintain total column width when resizing a column. Defaults to `False`.\n        row_height: Fixed height for rows. Defaults to `None`.\n        selectable_rows: Whether a row is selectable. An integer value sets the maximum number of rows, that can be selected.\n            If set to `\"highlight\"`, rows do not change their state when they are clicked. Defaults to `\"highlight\"`.\n    \"\"\"\n\n    add_row_pos: Literal[\"bottom\", \"top\"] = \"bottom\"\n    columns: list = None\n    frozen_rows: int = None\n    group_by: Union[str, list] = None\n    header_visible: bool = True\n    height: Union[int, None] = 311\n    history: bool = False\n    index: str = \"id\"\n    layout: Literal[\n        \"fitData\", \"fitDataFill\", \"fitDataStretch\", \"fitDataTable\", \"fitColumns\"\n    ] = \"fitColumns\"\n    movable_rows: bool = False\n    pagination_add_row: Literal[\"page\", \"table\"] = \"page\"\n    pagination: bool = False\n    pagination_counter: str = \"rows\"\n    resizable_column_fit: bool = False\n    row_height: int = None\n    selectable_rows: Union[str, bool, int] = \"highlight\"\n\n    def to_dict(self):\n        return asdict(\n            self,\n            dict_factory=lambda x: {\n                snake_to_camel_case(k): v for (k, v) in x if v is not None\n            },\n        )\n</code></pre>"},{"location":"changelog/","title":"Changelog for Tabulator for Python","text":""},{"location":"changelog/#pytabulator-v024-2024-04-09","title":"pytabulator v0.2.4 (2024-04-09)","text":"<ul> <li>Shiny &gt;= 0.7.0</li> </ul>"},{"location":"changelog/#pytabulator-v023-2024-02-06","title":"pytabulator v0.2.3 (2024-02-06)","text":"<ul> <li>Make Pydantic optional</li> </ul>"},{"location":"changelog/#pytabulator-v022-2024-02-04","title":"pytabulator v0.2.2 (2024-02-04)","text":"<ul> <li>Add themes</li> <li>Add optional support for xlsx exports via sheetjs</li> </ul>"},{"location":"changelog/#pytabulator-v021-2024-02-03","title":"pytabulator v0.2.1 (2024-02-03)","text":"<ul> <li>Set version of pandas requirement to <code>&gt;=1.5.3</code></li> <li>Allow extra arguments in <code>TableOptions</code></li> </ul>"},{"location":"changelog/#pytabulator-v020-2024-02-02","title":"pytabulator v0.2.0 (2024-02-02)","text":"<p>Initial PyPI release</p> <ul> <li>Add docs</li> <li>Rename <code>TabulatorOptions</code> to <code>TableOptions</code></li> <li>Use Pydantic for <code>TableOptions</code></li> <li>Add more <code>input</code> events</li> <li>Add detailed example</li> <li>Add utility function to create columns configuration from data frame</li> </ul>"},{"location":"changelog/#pytabulator-v010-2024-01-31-pre-release","title":"pytabulator v0.1.0 (2024-01-31, Pre-release)","text":"<p>Initial release</p>"},{"location":"columns/","title":"Columns and filters","text":"<p>With the <code>columns</code> argument of <code>TableOptions</code> you can configure the columns of the table.</p> <p>See Tabulator JS columns docs for a complete list of available setup options.</p>"},{"location":"columns/#default-definition","title":"Default definition","text":"<p>If no <code>columns</code> arguments is provided, <code>title</code> and <code>field</code> is set to the column name of the data frame. Furthermore, the alignment is set to <code>right</code> for numeric columns.</p> <pre><code>from pandas import DataFrame\nfrom pytabulator import render_data_frame\n\ndata = [[\"Peter\", 10], [\"Hans\", 12]]\ndf = DataFrame(data, columns=[\"Name\", \"Age\"])\n\n@render_data_frame\ndef tabulator():\n    return df\n</code></pre> <p>The following definition is created by default for the above data frame:</p> <pre><code>columns = [\n    {\"title\": \"Name\", \"field\": \"Name\", \"horizAlign\": \"left\"},\n    {\"title\": \"Age\", \"field\": \"Age\", \"horizAlign\": \"right\"}\n]\n</code></pre>"},{"location":"columns/#customize-default-configuration","title":"Customize default configuration","text":"<p>With <code>create_columns</code> you can customize the default configuration:</p> <pre><code>from pandas import DataFrame\nfrom pytabulator import TableOptions\nfrom pytabulator.utils import create_columns\n\ndata = [[\"Peter\", 10, 102.5], [\"Hans\", 12, 200.9]]\ndf = DataFrame(data, columns=[\"Name\", \"Age\", \"JustANumber\"])\n\ntable_options = TableOptions(\n    columns=create_columns(\n        df,\n        default_filter=True,\n        default_editor=True,\n        updates={\"JustANumber\": {\"formatter\": \"progress\", \"horizAlign\": \"left\"}})\n)\n</code></pre> <p>In the example above with <code>default_editor=True</code> all columns are set to editable and with <code>default_filter=True</code> a header filter is added to all columns. For numeric columns the editor and filter mode is set to <code>number</code>.</p> <p>The <code>updates</code> arguments allows you to overwrite any defaults set for a column. In this case the <code>formatter</code> of the numeric column <code>JustANumber</code> is set to <code>progress</code> and the alignment is changed from <code>right</code> to <code>left</code>.</p>"},{"location":"columns/#calculations","title":"Calculations","text":"<p>Calculations can be set with the <code>bottomCalc</code> parameter:</p> <pre><code>from pytabulator import TableOptions\n\ncolumns = [\n    {\"title\": \"Name\", \"field\": \"Name\", \"horizAlign\": \"left\"},\n    {\"title\": \"Age\", \"field\": \"Age\", \"horizAlign\": \"right\", \"bottomCalc\": \"avg\"}\n]\n\ntable_options = TableOptions(columns=columns)\n</code></pre>"},{"location":"columns/#filters","title":"Filters","text":"<p>You can add a filter to the columns with the <code>headerFilter</code> parameter:</p> <pre><code>from pytabulator import TableOptions\n\ncolumns = [\n    {\n        \"title\": \"Name\",\n        \"field\": \"Name\",\n        \"horizAlign\": \"left\",\n        \"headerFilter\": True\n    },\n    {\n        \"title\": \"Age\",\n        \"field\": \"Age\",\n        \"horizAlign\": \"right\",\n        \"bottomCalc\": \"avg\",\n        \"headerFilter\": \"number\"\n    }\n]\n\ntable_options = TableOptions(columns=columns)\n</code></pre> <p>Shiny Express example:</p> <pre><code>import pandas as pd\nfrom pytabulator import TableOptions, Tabulator, TabulatorContext, render_tabulator\nfrom shiny import reactive, render\nfrom shiny.express import input, ui\n\ndf = pd.read_csv(\n    \"https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv\"\n)\n\n# Setup\n#\ncolumns = [\n    {\n        \"title\": \"Name\",\n        \"field\": \"Name\",\n        \"headerFilter\": True,\n        \"headerFilterPlaceholder\": \"Find a Person...\",\n        # \"headerFilterLiveFilter\": False,\n    },\n    {\n        \"title\": \"Survived\",\n        \"field\": \"Survived\",\n        \"hozAlign\": \"right\",\n        \"headerFilter\": \"list\",\n        \"headerFilterParams\": {\n            \"values\": {\n                \"1\": \"Survived\",\n                \"0\": \"Died\",\n            }\n        },\n    },\n]\n\ntable_options = TableOptions(\n    height=600, pagination=True, layout=\"fitDataTable\", columns=columns\n)\n\n# Shiny Express app\n#\nui.div(\n    ui.input_action_button(\"clear_filter\", \"Clear Filter\"),\n    style=\"padding-bottom: 10px; padding-top: 10px;\",\n)\n\n\n@reactive.Effect\n@reactive.event(input.clear_filter)\nasync def clear_filter():\n    async with TabulatorContext(\"tabulator\") as table:\n        table.add_call(\"clearHeaderFilter\")\n\n\n@render.code\nasync def txt():\n    print(input.tabulator_data_filtered())\n    return f\"Number of search result: {len(input.tabulator_data_filtered())}\"\n\n\n@render_tabulator\ndef tabulator():\n    return Tabulator(df, table_options)\n</code></pre>"},{"location":"columns/#editor","title":"Editor","text":"<p>Set <code>editor</code> to <code>True</code>, <code>\"input\"</code> or <code>\"number\"</code> to make the cells of a column editable:</p> <pre><code>columns = [\n    {\"title\": \"Name\", \"field\": \"Name\", \"horizAlign\": \"left\", \"editor\": True},\n    {\"title\": \"Age\", \"field\": \"Age\", \"horizAlign\": \"right\", \"editor\": \"number\"}\n]\n</code></pre>"},{"location":"events/","title":"Events and triggers","text":""},{"location":"events/#events","title":"Events","text":"<p>Tabulator for Python provides the following reactive inputs:</p> <ul> <li><code>input.{output_id}_row_clicked</code> event: Sends the data of the clicked row.</li> <li><code>input.{output_id}_row_edited</code> event: Sends the data of the edited row. This event is fired each time a cell of the row is edited.</li> <li><code>input.{output_id}_rows_selected</code> event: Sends the data of all selected rows. This event is fired each time a new row is selected.</li> <li><code>input.{output_id}_data</code> event: Sends the complete data of the table. This event must be triggered from Shiny.</li> <li><code>input.{output_id}_data_filtered</code> event: Sends data of filtered rows. This event is triggered each time a filter is applied.</li> </ul> <pre><code>from shiny import render\nfrom pandas import read_csv\nfrom pytabulator import render_data_frame\n\n\n# in this case (Shiny Express) the function name corresponds to the 'output_id'\n# output_id = \"tabulator\"\n#\n# on-row-clicked event: input.tabulator_row_clicked\n# on-row-edited event: input.tabulator_row_edited\n#\n@render_data_frame\ndef tabulator():\n    return read_csv(\"https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv\")\n\n\n# row-on-click event\n#\n@render.code\nasync def txt():\n    print(input.tabulator_row_clicked())\n    return input.tabulator_row_clicked()[\"Name\"]\n\n\n# row-edited event\n#\n@render.code\ndef row_edited():\n    data = input.tabulator_row_edited()\n    print(data)\n    return f\"{data['Name']}, {data['Sex']}\"\n</code></pre>"},{"location":"events/#triggers","title":"Triggers","text":"<p>With <code>TabulatorContext</code> you can trigger events on the <code>table</code> object. <code>TabulatorContext</code> must be used in an async function:</p> <pre><code>from shiny import reactive\nfrom shiny.express import ui\nfrom pytabulator import TabulatorContext\n\nui.input_action_button(\"trigger_download\", \"Download\")\nui.input_action_button(\"add_row\", \"Add row\")\n\n\n# Trigger download of csv file\n#\n@reactive.Effect\n@reactive.event(input.trigger_download)\nasync def trigger_download():\n    print(\"download triggered\")\n    async with TabulatorContext(\"tabulator\") as table:\n        table.trigger_download(\"csv\")\n\n\n# Add a row to the table\n#\n@reactive.Effect\n@reactive.event(input.add_row)\nasync def add_row():\n    async with TabulatorContext(\"tabulator\") as table:\n        table.add_row({\"Name\": \"Hans\", \"Sex\": \"male\"})\n</code></pre>"},{"location":"events/#detailed-example","title":"Detailed example","text":"<pre><code>from random import randrange\n\nimport pandas as pd\nfrom pytabulator import TableOptions, Tabulator, TabulatorContext, render_tabulator\nfrom pytabulator.utils import create_columns\nfrom shiny import reactive, render\nfrom shiny.express import input, ui\n\n# Fetch data\n#\ndf = pd.read_csv(\n    \"https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv\"\n)[[\"PassengerId\", \"Name\", \"Pclass\", \"Sex\", \"Age\", \"Fare\", \"Survived\"]]\n\n# Setup\n#\ntable_options = TableOptions(\n    columns=create_columns(\n        df,\n        default_filter=True,\n        default_editor=True,\n        updates={\n            \"Pclass\": {\n                \"formatter\": \"star\",\n                \"formatterParams\": {\"stars\": 3},\n                \"hozAlign\": \"center\",\n            },\n            \"Survived\": {\"formatter\": \"tickCross\"},\n            \"Fare\": {\"formatter\": \"progress\", \"hozAlign\": \"left\"},\n        },\n    ),\n    height=413,\n    pagination=True,\n    pagination_add_row=\"table\",\n    layout=\"fitColumns\",\n    index=\"PassengerId\",\n    add_row_pos=\"top\",\n    selectable_rows=True,\n    history=True,\n)\n\n# Shiny Express App\n#\nwith ui.div(style=\"padding-top: 0px;\"):\n    ui.input_action_button(\"trigger_download\", \"Download\")\n    ui.input_action_button(\"add_row\", \"Add row\")\n    ui.input_action_button(\"delete_selected_rows\", \"Delete selected rows\")\n    ui.input_action_button(\"undo\", \"Undo\")\n    ui.input_action_button(\"redo\", \"Redo\")\n    ui.input_action_button(\"trigger_get_data\", \"Submit data\")\n\nui.div(\n    ui.input_text(\"name\", \"Click on 'Add row' to add the Person to the table.\"),\n    style=\"padding-top: 20px;\",\n)\nui.div(\"Click on a row to print the name of the person.\", style=\"padding: 10px;\"),\n\n\n@render.code\nasync def txt():\n    print(input.tabulator_row_clicked())\n    return input.tabulator_row_clicked()[\"Name\"]\n\n\nui.div(\n    \"Select multiple rows to print the names of the selected persons.\",\n    style=\"padding: 10px;\",\n),\n\n\n@render.code\ndef selected_rows():\n    data = input.tabulator_rows_selected()\n    output = [item[\"Name\"] for item in data]\n    return \"\\n\".join(output)\n\n\n@render_tabulator\ndef tabulator():\n    return Tabulator(df, table_options).options(\n        editTriggerEvent=\"dblclick\"\n    )  # .options(selectableRows=True)\n\n\n@reactive.Effect\n@reactive.event(input.trigger_download)\nasync def trigger_download():\n    print(\"download triggered\")\n    async with TabulatorContext(\"tabulator\") as table:\n        table.trigger_download(\"csv\")\n\n\n@reactive.Effect\n@reactive.event(input.add_row)\nasync def add_row():\n    async with TabulatorContext(\"tabulator\") as table:\n        table.add_row(\n            {\n                \"Name\": input.name() or \"Hans\",\n                \"Age\": randrange(55),\n                \"Survived\": randrange(2),\n                \"PassengerId\": randrange(10000, 20000, 1),\n                \"SibSp\": randrange(9),\n            }\n        )\n\n\n@reactive.Effect\n@reactive.event(input.delete_selected_rows)\nasync def delete_selected_rows():\n    async with TabulatorContext(\"tabulator\") as table:\n        table.delete_selected_rows()\n\n\n@reactive.Effect\n@reactive.event(input.undo)\nasync def undo():\n    async with TabulatorContext(\"tabulator\") as table:\n        table.undo()\n\n\n@reactive.Effect\n@reactive.event(input.redo)\nasync def redo():\n    async with TabulatorContext(\"tabulator\") as table:\n        table.redo()\n\n\n@reactive.Effect\n@reactive.event(input.trigger_get_data)\nasync def trigger_get_data():\n    async with TabulatorContext(\"tabulator\") as table:\n        table.trigger_get_data()\n\n\n@reactive.Effect\n@reactive.event(input.tabulator_data)\ndef tabulator_data():\n    print(input.tabulator_data()[0])\n</code></pre>"},{"location":"example/","title":"Showcase","text":"<p>This example uses Shiny Express.</p> <pre><code>shiny run docs/examples/getting_started/shiny_express_all.py\n</code></pre> <pre><code>from random import randrange\n\nimport pandas as pd\nfrom pytabulator import TableOptions, Tabulator, TabulatorContext, render_tabulator\nfrom pytabulator.utils import create_columns\nfrom shiny import reactive, render\nfrom shiny.express import input, ui\n\n# Fetch data\n#\ndf = pd.read_csv(\n    \"https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv\"\n)[[\"PassengerId\", \"Name\", \"Pclass\", \"Sex\", \"Age\", \"Fare\", \"Survived\"]]\n\n# Setup\n#\ntable_options = TableOptions(\n    columns=create_columns(\n        df,\n        default_filter=True,\n        default_editor=True,\n        updates={\n            \"Pclass\": {\n                \"formatter\": \"star\",\n                \"formatterParams\": {\"stars\": 3},\n                \"hozAlign\": \"center\",\n            },\n            \"Survived\": {\"formatter\": \"tickCross\"},\n            \"Fare\": {\"formatter\": \"progress\", \"hozAlign\": \"left\"},\n        },\n    ),\n    height=413,\n    pagination=True,\n    pagination_add_row=\"table\",\n    layout=\"fitColumns\",\n    index=\"PassengerId\",\n    add_row_pos=\"top\",\n    selectable_rows=True,\n    history=True,\n)\n\n# Shiny Express App\n#\nwith ui.div(style=\"padding-top: 0px;\"):\n    ui.input_action_button(\"trigger_download\", \"Download\")\n    ui.input_action_button(\"add_row\", \"Add row\")\n    ui.input_action_button(\"delete_selected_rows\", \"Delete selected rows\")\n    ui.input_action_button(\"undo\", \"Undo\")\n    ui.input_action_button(\"redo\", \"Redo\")\n    ui.input_action_button(\"trigger_get_data\", \"Submit data\")\n\nui.div(\n    ui.input_text(\"name\", \"Click on 'Add row' to add the Person to the table.\"),\n    style=\"padding-top: 20px;\",\n)\nui.div(\"Click on a row to print the name of the person.\", style=\"padding: 10px;\"),\n\n\n@render.code\nasync def txt():\n    print(input.tabulator_row_clicked())\n    return input.tabulator_row_clicked()[\"Name\"]\n\n\nui.div(\n    \"Select multiple rows to print the names of the selected persons.\",\n    style=\"padding: 10px;\",\n),\n\n\n@render.code\ndef selected_rows():\n    data = input.tabulator_rows_selected()\n    output = [item[\"Name\"] for item in data]\n    return \"\\n\".join(output)\n\n\n@render_tabulator\ndef tabulator():\n    return Tabulator(df, table_options).options(\n        editTriggerEvent=\"dblclick\"\n    )  # .options(selectableRows=True)\n\n\n@reactive.Effect\n@reactive.event(input.trigger_download)\nasync def trigger_download():\n    print(\"download triggered\")\n    async with TabulatorContext(\"tabulator\") as table:\n        table.trigger_download(\"csv\")\n\n\n@reactive.Effect\n@reactive.event(input.add_row)\nasync def add_row():\n    async with TabulatorContext(\"tabulator\") as table:\n        table.add_row(\n            {\n                \"Name\": input.name() or \"Hans\",\n                \"Age\": randrange(55),\n                \"Survived\": randrange(2),\n                \"PassengerId\": randrange(10000, 20000, 1),\n                \"SibSp\": randrange(9),\n            }\n        )\n\n\n@reactive.Effect\n@reactive.event(input.delete_selected_rows)\nasync def delete_selected_rows():\n    async with TabulatorContext(\"tabulator\") as table:\n        table.delete_selected_rows()\n\n\n@reactive.Effect\n@reactive.event(input.undo)\nasync def undo():\n    async with TabulatorContext(\"tabulator\") as table:\n        table.undo()\n\n\n@reactive.Effect\n@reactive.event(input.redo)\nasync def redo():\n    async with TabulatorContext(\"tabulator\") as table:\n        table.redo()\n\n\n@reactive.Effect\n@reactive.event(input.trigger_get_data)\nasync def trigger_get_data():\n    async with TabulatorContext(\"tabulator\") as table:\n        table.trigger_get_data()\n\n\n@reactive.Effect\n@reactive.event(input.tabulator_data)\ndef tabulator_data():\n    print(input.tabulator_data()[0])\n</code></pre>"},{"location":"table/","title":"Table","text":"<p>The table configuration is set with <code>TableOptions</code>:</p> <pre><code>from pytabulator import TableOptions\n\ntable_options = TableOptions(\n    layout=\"fitData\",\n    height=\"600px\",\n    pagination=True,\n    selectable=True\n)\n</code></pre> <p>The table options can either be passed to the render decorator:</p> <pre><code>from pandas import read_csv\nfrom pytabulator import render_data_frame, TableOptions\n\ndf = read_csv(\"titanic.csv\")\n\ntable_options = TableOptions(\n    height=\"600px\",\n    pagination=True\n)\n\n@render_data_frame(table_options=table_options)\ndef tabulator():\n    return df\n</code></pre> <p>Or to the <code>Tablulator</code> object:</p> <pre><code>from pandas import read_csv\nfrom pytabulator import render_tabulator, TableOptions, Tabulator\n\ndf = read_csv(\"titanic.csv\")\n\ntable_options = TableOptions(\n    height=\"600px\",\n    pagination=True\n)\n\n@render_tabulator\ndef tabulator():\n    return Tabulator(df, table_options=table_options)\n</code></pre>"},{"location":"concept/themes/","title":"Themes","text":"<p>See Tabulator JS Themes for details.</p> <p>Pytabulator comes with a number of pre-packaged theme stylesheets to make styling your table really simple. To use one of these instead of the default theme simply include the matching function before you render the table:</p> <pre><code>from pytabulator import theme\n\ntheme.tabulator_midnight()\n</code></pre>"},{"location":"concept/themes/#standard-themes","title":"Standard themes","text":""},{"location":"concept/themes/#pytabulator.theme.tabulator_midnight","title":"<code>tabulator_midnight()</code>","text":"<p>Midnight</p> <p>A dark, stylish layout using simple shades of grey.</p>"},{"location":"concept/themes/#pytabulator.theme.tabulator_modern","title":"<code>tabulator_modern()</code>","text":"<p>Modern</p> <p>A neat, stylish layout using one primary color.</p>"},{"location":"concept/themes/#pytabulator.theme.tabulator_simple","title":"<code>tabulator_simple()</code>","text":"<p>Simple</p> <p>A plain, simplistic layout showing only basic grid lines.</p>"},{"location":"concept/themes/#pytabulator.theme.tabulator_site","title":"<code>tabulator_site()</code>","text":"<p>Site</p> <p>The theme used for tables on the docs website of Tabulator JS.</p>"},{"location":"concept/themes/#framework-themes","title":"Framework themes","text":""},{"location":"concept/themes/#pytabulator.theme.tabulator_bootstrap3","title":"<code>tabulator_bootstrap3()</code>","text":"<p>Bootstrap 3</p> <p>A Bootstrap 3 compatible theme.</p>"},{"location":"concept/themes/#pytabulator.theme.tabulator_bootstrap4","title":"<code>tabulator_bootstrap4()</code>","text":"<p>Bootstrap 4</p> <p>A Bootstrap 4 compatible theme.</p>"},{"location":"concept/themes/#pytabulator.theme.tabulator_bootstrap5","title":"<code>tabulator_bootstrap5()</code>","text":"<p>Bootstrap 5</p> <p>A Bootstrap 5 compatible theme.</p>"},{"location":"concept/themes/#pytabulator.theme.tabulator_semanticui","title":"<code>tabulator_semanticui()</code>","text":"<p>Semantic UI</p> <p>A Semantic UI compatible theme.</p>"},{"location":"concept/themes/#pytabulator.theme.tabulator_bulma","title":"<code>tabulator_bulma()</code>","text":"<p>Bulma</p> <p>A Bulma compatible theme.</p>"},{"location":"concept/themes/#pytabulator.theme.tabulator_materialize","title":"<code>tabulator_materialize()</code>","text":"<p>Materialize</p> <p>A Materialize compatible theme.</p>"},{"location":"examples/edit_data/","title":"Edit data","text":"<pre><code>import pandas as pd\nfrom pytabulator import (\n    TableOptions,\n    Tabulator,\n    TabulatorContext,\n    output_tabulator,\n    render_tabulator,\n)\nfrom pytabulator.utils import create_columns\nfrom shiny import App, reactive, ui\n\ndf = pd.DataFrame({\"id\": [1, 2, 3], \"name\": [\"Hans\", \"Peter\", \"Hanna\"]})\ntable_options = TableOptions(columns=create_columns(df, default_editor=True))\n\napp_ui = ui.page_auto(\n    ui.h1(\"Edit data and submit changes\", style=\"padding-top: 10px;\"),\n    output_tabulator(\"tabulator\"),\n    ui.div(ui.input_action_button(\"submit\", \"Submit data\"), style=\"padding-top: 10px;\"),\n)\n\n\ndef server(input, output, session):\n    @render_tabulator\n    def tabulator():\n        return Tabulator(df, table_options)\n\n    @reactive.Effect\n    @reactive.event(input.submit)\n    async def trigger_get_data():\n        async with TabulatorContext(\"tabulator\") as table:\n            print(\"get data\")\n            table.trigger_get_data()\n\n    @reactive.Effect\n    @reactive.event(input.tabulator_data)\n    def tabulator_data():\n        df_submitted = pd.DataFrame(input.tabulator_data())\n        print(df_submitted)\n\n\napp = App(app_ui, server)\n</code></pre>"},{"location":"examples/exports/","title":"Downloads","text":"<pre><code>import pandas as pd\nfrom pytabulator import (\n    TableOptions,\n    Tabulator,\n    TabulatorContext,\n    render_tabulator,\n    theme,\n)\nfrom pytabulator.ui import use_sheetjs\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\n# Include sheetjs to support xlsx downloads\n#\nuse_sheetjs()\n\nwith ui.div(style=\"padding-top: 10px;\"):\n    ui.input_action_button(\"trigger_download\", \"Download\")\n\nwith ui.div(style=\"padding-top: 10px;\"):\n    ui.input_select(\"data_type\", label=\"Data type\", choices=[\"csv\", \"json\", \"xlsx\"])\n\n\ntheme.tabulator_site()\n\n\n@render_tabulator\ndef tabulator():\n    df = pd.read_csv(\n        \"https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv\"\n    )\n    return Tabulator(\n        df,\n        TableOptions(\n            height=600,\n            pagination=True,\n            layout=\"fitColumns\",\n        ),\n    )\n\n\n@reactive.Effect\n@reactive.event(input.trigger_download)\nasync def trigger_download():\n    print(\"download triggered\")\n    async with TabulatorContext(\"tabulator\") as table:\n        table.trigger_download(input.data_type())\n</code></pre>"},{"location":"examples/themes/","title":"Themes","text":"<pre><code>import pandas as pd\nfrom pytabulator import TableOptions, Tabulator, render_tabulator, theme\nfrom shiny import render\nfrom shiny.express import input, ui\n\ntable_options = TableOptions(\n    height=600,\n    pagination=True,\n    layout=\"fitColumns\",\n)\n\n# Set theme\n#\ntheme.tabulator_midnight()\n\nui.div(\"Click on row to print name.\", style=\"padding: 10px;\")\n\n\n@render.code\nasync def txt():\n    print(input.tabulator_row_clicked())\n    return input.tabulator_row_clicked()[\"Name\"]\n\n\n@render_tabulator\ndef tabulator():\n    df = pd.read_csv(\n        \"https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv\"\n    )\n    return Tabulator(df, table_options)\n</code></pre>"}]}